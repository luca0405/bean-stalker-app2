name: iOS Build - Automatic Signing Only
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build web app  
      run: npm run build
      
    - name: Sync Capacitor
      run: npx cap sync ios
      
    - name: Setup App Store Connect API
      run: |
        mkdir -p ~/private_keys
        echo "${{ secrets.APPSTORE_API_PRIVATE_KEY }}" > ~/private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8
        chmod 600 ~/private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8
        
    - name: Clean any previous provisioning profile assignments
      run: |
        cd ios
        
        echo "Cleaning project to remove any cached provisioning profile assignments..."
        xcodebuild clean \
          -workspace App/App.xcworkspace \
          -scheme App \
          -configuration Release
          
        # Remove any cached provisioning profiles
        rm -rf ~/Library/MobileDevice/Provisioning\ Profiles/*
        
    - name: Force automatic signing for all targets
      run: |
        cd ios/App
        
        echo "Setting automatic signing for ALL targets in project..."
        
        # Use xcodebuild to set automatic signing for all targets
        xcodebuild \
          -workspace App.xcworkspace \
          -scheme App \
          -configuration Release \
          -destination generic/platform=iOS \
          CODE_SIGN_STYLE=Automatic \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE="" \
          PROVISIONING_PROFILE_SPECIFIER="" \
          DEVELOPMENT_TEAM=A43TZWNYA3 \
          PRODUCT_BUNDLE_IDENTIFIER=com.beanstalker.member \
          build
          
        echo "Build test completed - now proceeding with archive..."
        
    - name: Archive with automatic signing
      run: |
        cd ios
        
        echo "Creating archive with automatic signing for all targets..."
        
        xcodebuild \
          -workspace App/App.xcworkspace \
          -scheme App \
          -configuration Release \
          -destination generic/platform=iOS \
          -archivePath App.xcarchive \
          -authenticationKeyIssuerID "${{ secrets.APPSTORE_ISSUER_ID }}" \
          -authenticationKeyID "${{ secrets.APPSTORE_API_KEY_ID }}" \
          -authenticationKeyPath ~/private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8 \
          -allowProvisioningUpdates \
          -allowProvisioningDeviceRegistration \
          CODE_SIGN_STYLE=Automatic \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE="" \
          PROVISIONING_PROFILE_SPECIFIER="" \
          DEVELOPMENT_TEAM=A43TZWNYA3 \
          PRODUCT_BUNDLE_IDENTIFIER=com.beanstalker.member \
          archive
          
        echo "Archive created successfully!"
        ls -la App.xcarchive/
        
    - name: Show certificates that were used
      run: |
        echo "Certificates used during build:"
        security find-identity -v -p codesigning
        
    - name: Export for App Store
      run: |
        cd ios
        
        cat > ExportOptions.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>A43TZWNYA3</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>manageAppVersionAndBuildNumber</key>
            <true/>
        </dict>
        </plist>
        EOF
        
        echo "Exporting for App Store..."
        xcodebuild \
          -exportArchive \
          -archivePath App.xcarchive \
          -exportPath export \
          -exportOptionsPlist ExportOptions.plist \
          -authenticationKeyIssuerID "${{ secrets.APPSTORE_ISSUER_ID }}" \
          -authenticationKeyID "${{ secrets.APPSTORE_API_KEY_ID }}" \
          -authenticationKeyPath ~/private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8 \
          -allowProvisioningUpdates
          
        echo "Export completed!"
        ls -la export/
        
    - name: Upload to TestFlight
      run: |
        echo "Uploading to TestFlight..."
        xcrun altool \
          --upload-app \
          --type ios \
          --file "ios/export/App.ipa" \
          --apiKey "${{ secrets.APPSTORE_API_KEY_ID }}" \
          --apiIssuer "${{ secrets.APPSTORE_ISSUER_ID }}" \
          --verbose
          
        echo "Successfully uploaded Bean Stalker to TestFlight!"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: bean-stalker-ios-app-store
        path: |
          ios/export/App.ipa
          ios/App.xcarchive