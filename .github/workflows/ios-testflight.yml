name: iOS TestFlight (Fastlane)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install Dependencies
      run: npm ci
      
    - name: Build React App
      run: npm run build
      
    - name: Sync Capacitor
      run: npx cap sync ios
      
    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        
    - name: Install Fastlane
      run: |
        gem install fastlane
        
    - name: Create Keychain and Install Certificates
      run: |
        # Create temporary keychain
        security create-keychain -p temp_password temp_keychain
        security default-keychain -s temp_keychain
        security unlock-keychain -p temp_password temp_keychain
        security set-keychain-settings -t 3600 -l temp_keychain
        
        # Install distribution certificate
        echo "${{ secrets.IOS_DISTRIBUTION_CERT }}" | base64 --decode > dist_cert.p12
        security import dist_cert.p12 -k temp_keychain -P "${{ secrets.IOS_CERT_PASSWORD }}" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple: -s -k temp_password temp_keychain
        
        # Install provisioning profile
        echo "${{ secrets.IOS_PROVISIONING_PROFILE }}" | base64 --decode > profile.mobileprovision
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        PROFILE_UUID=$(security cms -D -i profile.mobileprovision -o /dev/stdout | plutil -extract UUID raw -)
        cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision
        
        # Get profile name
        PROFILE_NAME=$(security cms -D -i profile.mobileprovision -o /dev/stdout | plutil -extract Name raw -)
        echo "PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV
        
    - name: Create Fastlane Configuration
      working-directory: ios/App
      run: |
        mkdir -p fastlane
        cat > fastlane/Fastfile << 'EOF'
        default_platform(:ios)
        
        platform :ios do
          desc "Build and upload to TestFlight"
          lane :deploy do
            update_project_team(
              path: "App.xcodeproj",
              teamid: "A43TZWNYA3"
            )
            
            update_code_signing_settings(
              use_automatic_signing: true,
              path: "App.xcodeproj",
              team_id: "A43TZWNYA3"
            )
            
            build_app(
              workspace: "App.xcworkspace",
              scheme: "App",
              configuration: "Release",
              export_method: "app-store",
              export_options: {
                method: "app-store",
                teamID: "A43TZWNYA3",
                signingStyle: "automatic"
              },
              xcargs: "-allowProvisioningUpdates"
            )
            
            upload_to_testflight(
              api_key_path: "api_key.json",
              skip_waiting_for_build_processing: true
            )
          end
        end
        EOF
        
    - name: Create App Store Connect API Key
      working-directory: ios/App
      run: |
        cat > api_key.json << EOF
        {
          "key_id": "${{ secrets.APPSTORE_KEY_ID }}",
          "issuer_id": "${{ secrets.APPSTORE_ISSUER_ID }}",
          "key": "${{ secrets.APPSTORE_PRIVATE_KEY }}",
          "duration": 1200,
          "in_house": false
        }
        EOF
        
    - name: Run Fastlane
      working-directory: ios/App
      run: |
        fastlane deploy