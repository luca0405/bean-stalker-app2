name: iOS Build - Simple Fix
on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Xcode 16.2
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: '16.2'
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Build
      env:
        VITE_REVENUECAT_API_KEY: ${{ secrets.VITE_REVENUECAT_API_KEY }}
        OMNISEND_API_KEY: ${{ secrets.OMNISEND_API_KEY }}
        VITE_FORCE_SANDBOX: true
      run: |
        # Export environment variables for all subsequent steps
        echo "VITE_REVENUECAT_API_KEY=${{ secrets.VITE_REVENUECAT_API_KEY }}" >> $GITHUB_ENV
        echo "OMNISEND_API_KEY=${{ secrets.OMNISEND_API_KEY }}" >> $GITHUB_ENV
        
        # Verify the secrets are accessible
        echo "=== RevenueCat API Key Verification ==="
        if [ -z "${{ secrets.VITE_REVENUECAT_API_KEY }}" ]; then
          echo "❌ GitHub secret VITE_REVENUECAT_API_KEY is empty or not set"
          echo "Please configure the secret in GitHub repository settings"
          exit 1
        else
          echo "✅ GitHub secret VITE_REVENUECAT_API_KEY is configured"
          echo "Key length: ${#VITE_REVENUECAT_API_KEY} characters"
          echo "Key starts with: ${VITE_REVENUECAT_API_KEY:0:8}..."
        fi
        
        echo "=== Omnisend API Key Verification ==="
        if [ -z "${{ secrets.OMNISEND_API_KEY }}" ]; then
          echo "❌ GitHub secret OMNISEND_API_KEY is empty or not set"
          echo "Please configure the secret in GitHub repository settings"
          exit 1
        else
          echo "✅ GitHub secret OMNISEND_API_KEY is configured"
          echo "Key length: ${#OMNISEND_API_KEY} characters"
          echo "Key starts with: ${OMNISEND_API_KEY:0:8}..."
        fi
        
        npm ci
        echo "Building with RevenueCat API Key: $(test -n "$VITE_REVENUECAT_API_KEY" && echo "CONFIGURED" || echo "MISSING")"
        echo "Building in development mode for sandbox IAP testing"
        # Use existing production build but force sandbox environment
        VITE_FORCE_SANDBOX=true npm run build
        
        # Handle build output location issue
        echo "=== Verifying and fixing build output ==="
        ls -la dist/
        
        # Check if files are in dist/public and move them
        if [ -d "dist/public" ] && [ -f "dist/public/index.html" ]; then
          echo "Moving files from dist/public to dist/"
          cp -r dist/public/* dist/
          ls -la dist/
        fi
        
        if [ ! -f "dist/index.html" ]; then
          echo "Error: dist/index.html still not found after build"
          ls -la dist/
          exit 1
        fi
        echo "Build verification successful"
        
        # Verify environment variable is available for Capacitor
        echo "RevenueCat API Key for Capacitor sync: $(test -n "$VITE_REVENUECAT_API_KEY" && echo "CONFIGURED" || echo "MISSING")"
        npx cap sync ios
        cd ios/App && pod install
        
    - name: Setup API Key
      run: |
        mkdir -p ~/private_keys
        echo "${{ secrets.APPSTORE_API_PRIVATE_KEY }}" > ~/private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8
        chmod 600 ~/private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8
        
    - name: Setup keychain
      run: |
        security create-keychain -p "temppassword" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "temppassword" build.keychain
        security set-keychain-settings -t 3600 -l build.keychain
        
    - name: Build archive
      run: |
        cd ios
        xcodebuild archive \
          -workspace App/App.xcworkspace \
          -scheme App \
          -configuration Debug \
          -destination generic/platform=iOS \
          -archivePath App.xcarchive \
          -authenticationKeyIssuerID "${{ secrets.APPSTORE_ISSUER_ID }}" \
          -authenticationKeyID "${{ secrets.APPSTORE_API_KEY_ID }}" \
          -authenticationKeyPath ~/private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8 \
          -allowProvisioningUpdates \
          -allowProvisioningDeviceRegistration \
          CODE_SIGN_STYLE=Automatic \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE_SPECIFIER="" \
          DEVELOPMENT_TEAM=A43TZWNYA3 \
          PRODUCT_BUNDLE_IDENTIFIER=com.beanstalker.member
        
    - name: Clean rebuild with fixed Podfile configuration
      run: |
        echo "=== Cleaning and rebuilding with fixed bundle IDs ==="
        
        # Clean everything for fresh build
        cd ios/App
        rm -rf Pods Podfile.lock
        rm -rf ~/Library/Developer/Xcode/DerivedData
        
        # Install pods with updated Podfile
        pod install --repo-update
        
        # Verify Podfile configuration applied
        echo "=== Verifying Pod target bundle IDs ==="
        grep -r "PRODUCT_BUNDLE_IDENTIFIER" Pods/Target\ Support\ Files/ | head -10 || echo "No bundle ID conflicts found"
        
        # Fix build settings that cause archive conflicts
        echo "=== Fixing build configuration conflicts ==="
        
        # Override problematic build settings
        xcodebuild clean -workspace App.xcworkspace -scheme App
        
        xcodebuild archive \
          -workspace App.xcworkspace \
          -scheme App \
          -archivePath "../../ios/App-clean.xcarchive" \
          -configuration Debug \
          -destination generic/platform=iOS \
          -authenticationKeyIssuerID "${{ secrets.APPSTORE_ISSUER_ID }}" \
          -authenticationKeyID "${{ secrets.APPSTORE_API_KEY_ID }}" \
          -authenticationKeyPath ~/private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8 \
          -allowProvisioningUpdates \
          -allowProvisioningDeviceRegistration \
          CODE_SIGN_STYLE=Automatic \
          CODE_SIGN_IDENTITY="" \
          PROVISIONING_PROFILE_SPECIFIER="" \
          DEVELOPMENT_TEAM=A43TZWNYA3 \
          SWIFT_OPTIMIZATION_LEVEL=-O \
          SWIFT_COMPILATION_MODE=wholemodule
        
    - name: Export for App Store  
      run: |
        cd ios
        cat > ExportOptions.plist << 'EOF'
        <?xml version="1.0" encoding="UTF-8"?>
        <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
        <plist version="1.0">
        <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>A43TZWNYA3</string>
            <key>signingStyle</key>
            <string>automatic</string>
            <key>uploadBitcode</key>
            <false/>
            <key>uploadSymbols</key>
            <true/>
            <key>manageAppVersionAndBuildNumber</key>
            <true/>
            <key>stripSwiftSymbols</key>
            <true/>
        </dict>
        </plist>
        EOF
        
        xcodebuild -exportArchive \
          -archivePath App-clean.xcarchive \
          -exportPath export-clean \
          -exportOptionsPlist ExportOptions.plist \
          -authenticationKeyIssuerID "${{ secrets.APPSTORE_ISSUER_ID }}" \
          -authenticationKeyID "${{ secrets.APPSTORE_API_KEY_ID }}" \
          -authenticationKeyPath ~/private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8 \
          -allowProvisioningUpdates \
          -allowProvisioningDeviceRegistration
        
    - name: Upload to TestFlight
      run: |
        xcrun altool --upload-app \
          --type ios \
          --file "ios/export-clean/App.ipa" \
          --apiKey "${{ secrets.APPSTORE_API_KEY_ID }}" \
          --apiIssuer "${{ secrets.APPSTORE_ISSUER_ID }}" \
          --verbose
        
    - name: Save build
      uses: actions/upload-artifact@v4
      with:
        name: bean-stalker-mobile-connectivity-fix
        path: ios/export-clean/App.ipa